<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper 
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="adminMapper">
  
  <resultMap type="CollegeDto" id="collegeResult">
  	<id column="col_no" property="colNo" />
  	<result column="col_name" property="colName" />
  </resultMap>
  
  <resultMap type="MajorDto" id="majorResult">
  	<id column="major_no" property="majorNo" />
  	<result column="col_no" property="colNo" />
  	<result column="major_name" property="majorName" />
  	<result column="status" property="status" />
  </resultMap>
  
  <resultMap type="MemberDto" id="memberResult">
  	<id column="mem_No" property="memNo" />
  	<result column="major_name" property="majorNo" />
  	<result column="job_name" property="jobNo" />
  	<result column="mem_Name" property="memName" />
  	<result column="mem_id" property="memId" />
  	<result column="mem_pwd" property="memPwd" />
  	<result column="phone" property="phone" />
  	<result column="email" property="email" />
  	<result column="address" property="address" />
  	<result column="resident" property="resident" />
  	<result column="hire_date" property="hireDate" />
  	<result column="end_date" property="endDate" />
  	<result column="status" property="status" />
  	<result column="salary" property="salary" />
  	<result column="sign_url" property="signUrl" />
  	<result column="profile_Url" property="profileUrl" />
  	<result column="leave_Count" property="leaveCount" />
  	<result column="birth" property="birth" />
  	<result column="gender" property="gender" />
  </resultMap>
  
  <resultMap type="JobDto" id="jobResult">
  	<id column="job_No" property="jobNo" />
  	<result column="job_Name" property="jobName" />
  	<result column="job_Type" property="jobType" />
  	<result column="status" property="status" />
  	<result column="job_Level" property="jobLevel" />
  </resultMap>
  
  <resultMap type="VacationDto" id="vacationResult">
  	<id column="vac_no" property="vacNo" />
  	<result column="mem_no" property="memNo" />
  	<result column="vac_used" property="vacUsed" />
  	<result column="vac_option" property="vacOption" />
  	<result column="regist_date" property="registDate" />
  	<result column="vac_reason" property="vacReason" />
  	<result column="doc_no" property="docNo" />
  	<result column="status" property="status" />
  	<result column="start_date" property="startDate" />
  	<result column="end_date" property="endDate" />
  	<result column="vac_type_no" property="vacTypeNo" />
  	<result column="vac_type" property="vacType" />
  	<collection resultMap="memberResult" property="memberList" />
  	<collection resultMap="majorResult" property="majorList" />
  </resultMap>
  
  <resultMap type="AttendDto" id="attendResult">
  	<id column="atd_no" property="atdNo" />
  	<result column="mem_No" property="memNo" />
  	<result column="start_Time" property="startTime" />
  	<result column="end_Time" property="endTime" />
  	<result column="regist_Date" property="registDate" />
  	<result column="modify_Date" property="modifyDate" />
  	<result column="mod_No" property="modNo" />
  	<result column="status" property="status" />
  	<collection resultMap="memberResult" property="memberList" />
  </resultMap>
  
  <resultMap type="VacationTypeDto" id="vacationTypeResult">
  	<id column="vac_type_no" property="vacTypeNo" />
  	<result column="vac_type" property="vacType" />
  	<result column="vac_type_date" property="vacTypeDate" />
  </resultMap>
  
  <resultMap type="InsertDateDto" id="insertDateResult">
  	<id column="insert_No" property="insertNo" />
  	<result column="start_Date" property="startDate" />
  	<result column="end_Date" property="endDate" />
  	<result column="insert_Type" property="insertType" />
  </resultMap>

	<resultMap type="CalendarDto" id="calendarResult">
		<id column="cal_no" property="calNo" />
		<result column="ctg_no" property="ctgNo" />
		<result column="ctg_type" property="ctgType"/>
		<result column="color" property="color" />
		<result column="cal_title" property="calTitle" />
		<result column="cal_content" property="calContent" />
		<result column="start_date" property="startDate" />
		<result column="end_date" property="endDate" />
		<result column="is_allday" property="isAllday" />
		<result column="regist_date" property="registDate" />
		<result column="cal_writer" property="calWriter" />
		<result column="modify_date" property="modifyDate" />
		<result column="modifier_name" property="modifier" />
		<result column="status" property="status" />
	</resultMap>
	
	<resultMap type="ResourceDto" id="resourceResult">
		<id column="res_no" property="resNo"/>
		<result column="res_Type" property="resType"/>
		<result column="res_name" property="resName"/>
		<result column="res_detail" property="resDetail"/>
		<result column="use_status" property="useStatus"/>
		<result column="res_gps" property="resGps"/>
		<result column="regist_date" property="registDate"/>
		<result column="mod_date" property="modifyDate"/>
		<result column="stock" property="stock"/>
		<result column="status" property="status"/>
		<result column="del_content" property="delContent"/>
	</resultMap>
	
	<resultMap type="ReservationDto" id="reservationResult">
		<id column="rev_no" property="revNo"/>
		<result column="rev_reason" property="revReason"/>
		<result column="rev_date" property="revDate"/>
		<result column="start_time" property="startTime"/>
		<result column="end_time" property="endTime"/>
		<result column="regist_date" property="registDate"/>
		<result column="status" property="status"/>
		<result column="mem_name" property="memNo"/>
		<result column="res_name" property="resNo"/>
		<result column="res_type" property="resType"/>
		<result column="rev_count" property="revCount"/>
		<collection resultMap="memberResult" property="memberList" />
	</resultMap>

  <select id="selectCollegeList" resultMap="collegeResult">
  	select
  				 col_no
  			 , col_name
  		from college
  </select>
  
  <select id="selectMajorList" resultMap="majorResult">
  	select
		       major_no
		     , col_no
		     , major_name
		     , status
		  from major
		 where status = 'Y'
  </select>
  
  <select id="selectMemberListCount" resultType="_int">
  	select
  				 count(*)
  		from member
  	 where status = 'N'
  </select>
  
  <select id="selectMemberList" resultMap="memberResult">
		select
		       mem_no
		     , mem_name
		     , major_name
		     , job_name
		     , resident
		     , email
		     , address
		     , to_char(hire_date, 'YYYY-MM-DD') hire_date
		     , phone
		     , gender
		     , to_char(birth, 'YYMMDD') birth
		  from member
		  join major on (member.major_no = major.major_no)
		  join job on (member.job_no = job.job_no)
		 where member.status = 'N'
		 order
		    by mem_no desc
  </select>
  
  <select id="selectJobList" resultMap="jobResult">
		select
		       job_no
		     , job_name
		     , job_type
		     , status
		     , job_level
		  from job
		 where status = 'Y'
		 order
    		by job_level asc
  </select>
  
  <update id="updateOutMember">
		update
		       member
		   set status = 'Y'
		     , end_date = sysdate
		 <where>
		 	<foreach item="item" collection="array"
		 			open="mem_no in (" separator="," close=")">
		 		#{item}
		 	</foreach>
		 </where>
  </update>
  
	<update id="updateMajorMember">
  	update
  				 member
  		 set major_no = #{majorNo}
  	<where>
  		<foreach item="item" collection="memNo"
  				open="mem_no in (" separator="," close=")">
  			#{item}
  		</foreach>
  	</where>
  </update>
  
  <update id="updateJobMember">
  	update
  				 member
  		 set job_no = #{jobNo}
  	<where>
  		<foreach item="item" collection="memNo"
  				open="mem_no in (" separator="," close=")">
				#{item}  		
  		</foreach>
  	</where>
  </update>
  
  <!-- 필터링 ajax 통신 직원조회 (페이징) -->
  <select id="ajaxFilterMemberListCount" resultType="_int">
  	select
  				 count(*)
  		from member
    <where>
    	<if test="status != 'all'">
				and status = #{status}
    	</if>
    	<if test="majorNo != 0">
    		and major_no = #{majorNo}
    	</if>
    	<if test="jobNo != 0">
    		and job_no = #{jobNo}
    	</if>
    </where>
  </select>
  
  <!-- 필터링 ajax통신 직원조회 -->
  <select id="ajaxFilterMemberList" resultMap="memberResult">
  	select
		       mem_no
		     , mem_name
		     , major_name
		     , job_name
		     , resident
		     , email
		     , address
		     , to_char(hire_date, 'YYYY-MM-DD') hire_date
		     , phone
		     , to_char(birth, 'YYMMDD') birth
		     , gender
		  from member
		  join major on (member.major_no = major.major_no)
		  join job on (member.job_no = job.job_no)
     <where>
	     <if test="m.status != 'all'">
			 	 and member.status = #{m.status}
			 </if>
			 <if test="m.majorNo != 0">
			 	 and member.major_no = #{m.majorNo}
			 </if>
			 <if test="m.jobNo != 0">
			   and member.job_no = #{m.jobNo}
			 </if>
		 </where>
		 order
		    by mem_no desc
  </select>
  
  <!-- 이름검색 필터링 ajax 통신 직원조회 (페이징) -->
  <select id="ajaxNameFilterMemberListCount" resultType="_int">
  	select
  				 count(*)
  		from member
    <where>
    	<if test="status != 'all'">
				and status = #{status}
    	</if>
    	<if test="majorNo != 0">
    		and major_no = #{majorNo}
    	</if>
    	<if test="jobNo != 0">
    		and job_no = #{jobNo}
    	</if>
    	  and member.mem_name LIKE '%' || #{memName} || '%'
    </where>
  </select>
  
  <!-- 이름검색 필터링 ajax통신 직원조회(학과직급포함) -->
  <select id="ajaxNameFilterMemberList" resultMap="memberResult">
  	select
		       mem_no
		     , mem_name
		     , major_name
		     , job_name
		     , resident
		     , email
		     , address
		     , to_char(hire_date, 'YYYY-MM-DD') hire_date
		     , phone
		     , to_char(birth, 'YYMMDD') birth
		     , gender
		  from member
		  join major on (member.major_no = major.major_no)
		  join job on (member.job_no = job.job_no)
     <where>
	     <if test="m.status != 'all'">
			 	 and member.status = #{m.status}
			 </if>
			 <if test="m.majorNo != 0">
			 	 and member.major_no = #{m.majorNo}
			 </if>
			 <if test="m.jobNo != 0">
			   and member.job_no = #{m.jobNo}
			 </if>
			   and member.mem_name LIKE '%' || #{m.memName} || '%'
		 </where>
		 order
		    by mem_no desc
  </select>

  <insert id="insertOneMember">
		insert
		  into member
		  (
		    mem_no
		  , major_no
		  , job_no
		  , mem_name
		  , mem_id
		  , mem_pwd
		  , phone
		  , email
		  , address
		  , resident
		  , salary
		  , leave_count
		  , birth
		  , gender
		  )
		  values
		  (
		    seq_mem_no.nextval
		  , #{majorNo}
		  , #{jobNo}
		  , #{memName}
		  , #{memId}
		  , #{memPwd}
		  , #{phone}
		  , #{email}
		  , #{address}
		  , #{resident}
		  , #{salary}
		  , #{leaveCount}
		  , #{birth}
		  , #{gender}
		  )
  </insert>
  
  <select id="selectMemberDetail" resultMap="memberResult">
  	select
		       mem_no
		     , mem_name
		     , mem_id
		     , phone
		     , email
		     , address
		     , major_name
		     , job_name
		     , to_char(birth, 'YYYY-MM-DD') birth
		     , to_char(hire_date, 'YYYY-MM-DD') hire_date
		     , to_char(end_date, 'YYYY-MM-DD') end_date
		     , sign_url
		     , profile_url
		     , member.status
		  from member
		  join major on (member.major_no = major.major_no)
		  join job on (member.job_no = job.job_no)
		 where mem_no = #{memNo}
  </select>
  
  <update id="updateMember">
  	update
  				 member
  		 set mem_name = #{memName}
  		   , phone = #{phone}
  		   , major_no = #{majorNo}
  		   , job_no = #{jobNo}
  		   , address = #{address}
  	 where mem_no = #{memNo} 
  </update>
  
  <select id="selectDashboardMemberList" resultMap="memberResult">
  	select
  				 mem_no
  			 , mem_name
  			 , major_name
  			 , job_name
  		from member
  	  join major on (member.major_no = major.major_no)
		  join job on (member.job_no = job.job_no)
  	 where member.status = 'N'
  </select>
  
  <select id="selectDashboardVacation" resultMap="vacationResult">
    select 
    		   vac.*
	    from (
	      select
	      			 vac_no,
			         member.mem_no,
			         major_name,
			         mem_name,
			         to_char(vacation.start_date, 'YYYY-MM-DD') start_date,	
			         to_char(vacation.end_date, 'YYYY-MM-DD') end_date,	
			         vacation.status,
			         vac_reason,
			         vac_type
		      from member
		      join vacation ON (member.mem_no = vacation.mem_no)
		      join major on (member.major_no = major.major_no)
		     where member.status = 'N'
		       and vac_option = '사용'
		     order by vac_no desc
	   ) vac
	   where rownum between 1 and 7
  </select>
  
  <select id="selectAdminSetMajorList" resultMap="majorResult">
  	select
		       major_no
		     , col_no
		     , major_name
		     , status
		  from major
  </select>
  
  <select id="selectAdminSetJobList" resultMap="jobResult">
		select
		       job_no
		     , job_name
		     , job_type
		     , status
		     , job_level
		  from job
  </select>
  
  <insert id="insertMajor">
  	insert
  		into major
  		(
  			major_no
  		, col_no
  		, major_name
  		, status
  		)
  		values
  		(
  			seq_major_no.nextval
  		, #{colNo}
  		, #{majorName}
  		, 'Y'
  		)
  </insert>
  
  <update id="updateMajor">
  	update
  			   major
  		 set major_name = #{majorName}
  		   , status = #{status}
  	 where major_no = #{majorNo}
  </update>
  
  <insert id="insertJob">
  	insert
  	  into job
  	  (
  	  	job_no
  	  , job_name
  	  , job_type
  	  , status
  	  , job_level
  	  )
  	  values
  	  (
  	  	seq_job_no.nextval
  	  , #{jobName}
  	  , #{jobType}
  	  , 'Y'
  	  , #{jobLevel}
  	  )
  </insert>
  
  <update id="updateJob">
  	update
  			   job
  		 set job_name = #{jobName}
  		   , status = #{status}
  	 where job_no = #{jobNo}
  </update>
  
  <select id="selectRequestMemberListCount" resultType="_int">
  	select
  				 count(*)
  		from vacation
  	 where vac_option = '사용'
  </select>
  
  <select id="selectRequestMemberList" resultMap="vacationResult">
    select
	    		 vac_no,
	         member.mem_no,
	         mem_name,
	         major_name,
	         job_name,
	         to_char(vacation.start_date, 'YYYY-MM-DD') start_date,	
	         to_char(vacation.end_date, 'YYYY-MM-DD') end_date,
	         vac_used,
	         vacation.status,
	         vac_reason,
	         vac_type
      from member
      join vacation ON (member.mem_no = vacation.mem_no)
      join major on (member.major_no = major.major_no)
      join job on (member.job_no = job.job_no)
     where member.status = 'N'
       and vac_option = '사용'
     order 
     	  by vac_no desc
  </select>
  
  <select id="ajaxFilterSelectRequestLeaveMemberListCount" resultType="_int">
		select
					 count(*)
		  from vacation
		  join member on (vacation.mem_no = member.mem_no)
		 where vac_option = '사용'
	  	<if test="majorNo != 0">
	  		and major_no = #{majorNo}
	  	</if>
	  	<if test="jobNo != 0">
	  		and job_no = #{jobNo}
	  	</if>
  </select>
  
  <select id="ajaxFilterSelectRequestLeaveMemberList" resultMap="vacationResult">  	
    select
	    		 vac_no,
	         member.mem_no,
	         mem_name,
	         major_name,
	         job_name,
	         to_char(vacation.start_date, 'YYYY-MM-DD') start_date,	
	         to_char(vacation.end_date, 'YYYY-MM-DD') end_date,
	         vac_used,
	         vacation.status,
	         vac_reason,
	         vac_type
      from member
      join vacation ON (member.mem_no = vacation.mem_no)
      join major on (member.major_no = major.major_no)
      join job on (member.job_no = job.job_no)
     where member.status = 'N'
       and vac_option = '사용'
		 <if test="m.majorNo != 0">
		 	 and member.major_no = #{m.majorNo}
		 </if>
		 <if test="m.jobNo != 0">
		   and member.job_no = #{m.jobNo}
		 </if>
	     order 
	     	  by vac_no desc
  </select>
  
  <update id="requestLeaveYesMember">
  	update
  				 vacation
  	   set status = '2'
	  <where>
		 	<foreach item="item" collection="array"
		 			open="vac_no in (" separator="," close=")">
		 		#{item}
		 	</foreach>	  	
	  </where>
  </update>

  <update id="requestLeaveNoMember">
  	update
  				 vacation
  	   set status = '3'
	  <where>
		 	<foreach item="item" collection="array"
		 			open="vac_no in (" separator="," close=")">
		 		#{item}
		 	</foreach>	  	
	  </where>
  </update>
  
  <select id="memberLeaveListCount" resultType="_int">
  	select
  				 count(*)
  		from vacation
  	 where status = '2'
  </select>
  
  <select id="memberLeaveList" resultMap="vacationResult">
    select
           vac_no,
	         vacation.mem_no,
	         mem_name,
	         major_name,
	         job_name,
	         to_char(member.hire_date, 'YYYY-MM-DD') hire_date,	
	         phone,
	         vac_used,
           member.leave_count,
	         vacation.vac_type
      from vacation
      join member ON (vacation.mem_no = member.mem_no)
      join major on (member.major_no = major.major_no)
      join job on (member.job_no = job.job_no)
     where vacation.status = '2'
       and vac_option = '사용'
     order 
     	  by vac_no desc
  </select>
  
  <select id="ajaxFilterMemberLeaveListCount" resultType="_int">
  	select
  				 count(*)
  		from vacation
  		join member on (vacation.mem_no = member.mem_no)
  	 where vac_option = '사용'
	  	 and vacation.status = '2'
	  	<if test="memName != ''">
	  	  and mem_name LIKE '%' || #{memName} || '%'
	  	</if>      
	  	<if test="majorNo != 0">
		   	and major_no = #{majorNo}
		  </if>
	  	<if test="jobNo != 0">
	  		and job_no = #{jobNo}
	  	</if>
  </select>
  
  <select id="ajaxFilterMemberLeaveList" resultMap="vacationResult"> 	
    select
           vac_no,
	         vacation.mem_no,
	         mem_name,
	         major_name,
	         job_name,
	         to_char(member.hire_date, 'YYYY-MM-DD') hire_date,	
	         phone,
	         vac_used,
           member.leave_count,
	         vacation.vac_type
      from vacation
      join member ON (vacation.mem_no = member.mem_no)
      join major on (member.major_no = major.major_no)
      join job on (member.job_no = job.job_no)
     where vacation.status = '2'
       and vac_option = '사용'
       <if test="m.memName != ''">       
       	 and member.mem_name LIKE '%' || #{m.memName} || '%'
       </if>
			 <if test="m.majorNo != 0">
			 	 and member.major_no = #{m.majorNo}
			 </if>
			 <if test="m.jobNo != 0">
			   and member.job_no = #{m.jobNo}
			 </if>    
     order 
     	  by vac_no desc
  </select>
  
  <select id="memberLeaveDetail" resultMap="vacationResult">
		select
					 vac_no
				 , vacation.mem_no
				 , mem_name
				 , major_name
				 , job_name
				 , leave_count
				 , (
				 		select sum(vac_used)
				 			from vacation
				 		 where vac_option = '사용'
				 		   and mem_no = #{memNo}
				 		) vac_used
		 from vacation
		 join member on (vacation.mem_no = member.mem_no)
		 join major on (major.major_no = member.major_no)
		 join job on (job.job_no = member.job_no)
		where vac_option = '사용'
		  and vacation.mem_no = #{memNo}
		  and rownum = 1
  </select>
  
  <select id="memberLeaveDetailList" resultMap="vacationResult">
    select
           vac_no
         , to_char(vacation.start_date, 'YY-MM-DD') start_date
         , to_char(vacation.end_date, 'YY-MM-DD') end_date
         , vac_used
         , vac_type
         , vac_reason
         , mem_no
      from vacation
     where vac_option = '사용'
       and mem_no = #{memNo}
     order
        by vac_no desc
  </select>
  
  <select id="selectMemberLeaveType" resultMap="vacationTypeResult">
		select 
		       vac_type_no
		     , vac_type
		     , vac_type_date
		  from vacation_type
		 where vac_type_no in (1,2,3,4,5)
  </select>
  
	<select id="selectPlusVacCount" resultType="_int" >
		select nvl(sum(vac_used), 0)
      from vacation
     where vac_option = '보상'
     	 and mem_no = #{memNo}
	</select>
	
	<select id="selectUsedPlusVacCount" resultType="_int">
		select nvl(sum(vac_used), 0)
	    from vacation
	   where vac_option = '사용'
	     and vac_type = '포상'
	     and mem_no = #{memNo}
	</select>
	
	<insert id="insertMemberPlusLeave">
		insert
		  into vacation
		  (
		  	vac_no
		  , mem_no
		  , vac_used
		  , vac_option
			, vac_reason
			, vac_type_no
			, status
		  )
		  values
		  (
		  	seq_vac_no.nextval
		  , #{memNo}
		  , #{vacUsed}
		  , '보상'
		  , #{vacReason}
		  , #{vacTypeNo}
		  , 2
		  )
	</insert>
	
	<select id="memberAttendListCount" resultType="_int">
		select
				   count(*)
			from attend
	</select>
	
	<select id="memberAttendList" resultMap="attendResult">
		select 
				   atd_no
				 , attend.mem_no
				 , mem_name
				 , major_name
				 , job_name
				 , to_char(start_time, 'HH:MM:SS') start_time
				 , to_char(end_time, 'HH:MM:SS') end_time
				 , attend.status
				 , to_char(regist_date, 'YYYY-MM-DD') regist_date
			from attend
			join member on (member.mem_no = attend.mem_no)
			join major on (major.major_no = member.major_no)
			join job on (job.job_no = member.job_no)
	</select>
	
	<select id="ajaxFilterMemberAttendListCount" resultType="_int">
		select
					 count(*)
			from attend
			join member on (member.mem_no = attend.mem_no)
		  where member.status != 'Y'
		 	 <if test="m.memName != ''">
		 		and member.mem_name LIKE '%' || #{m.memName} || '%'
		 	 </if>
			 <if test="m.majorNo != 0">
			 	 and member.major_no = #{m.majorNo}
			 </if>
			 <if test="m.jobNo != 0">
			   and member.job_no = #{m.jobNo}
			 </if>
			 <if test="startDate != ''">
			 	<choose>
			 	 <when test="startDate == endDate">
			 	 	 and to_char(regist_date, 'YYYY-MM-DD') = #{startDate}
			 	 </when>
			 	 <otherwise>
			 	   and regist_date between #{startDate} AND #{newEndDate}
			 	 </otherwise>
			 	</choose>
			 </if>
	</select>
	
	<select id="ajaxFilterMemberAttendList" resultMap="attendResult">
		select 
				   atd_no
				 , attend.mem_no
				 , mem_name
				 , major_name
				 , job_name
				 , to_char(start_time, 'HH:MM:SS') start_time
				 , to_char(end_time, 'HH:MM:SS') end_time
				 , attend.status
				 , to_char(regist_date, 'YYYY-MM-DD') regist_date
			from attend
			join member on (member.mem_no = attend.mem_no)
			join major on (major.major_no = member.major_no)
			join job on (job.job_no = member.job_no)
		 where member.status != 'Y'
		 	 <if test="m.memName != ''">
		 		and member.mem_name LIKE '%' || #{m.memName} || '%'
		 	 </if>
			 <if test="m.majorNo != 0">
			 	 and member.major_no = #{m.majorNo}
			 </if>
			 <if test="m.jobNo != 0">
			   and member.job_no = #{m.jobNo}
			 </if>
			 <if test="startDate != ''">
			 	<choose>
			 	 <when test="startDate == endDate">
			 	 	 and to_char(regist_date, 'YYYY-MM-DD') = #{startDate}
			 	 </when>
			 	 <otherwise>
			 	   and regist_date between #{startDate} and #{newEndDate}
			 	 </otherwise>
			 	</choose>
			 </if>
	</select>
	
	<select id="ajaxTodayMemberAttendListCount" resultType="_int">
		select
					 count(*)
			from attend
			join member on (member.mem_no = attend.mem_no)
		  where member.status != 'Y'
			  and to_char(regist_date, 'YYYY-MM-DD') = #{startDate}
	</select>
  
	<select id="ajaxTodayMemberAttendList" resultMap="attendResult">
		select 
				   atd_no
				 , attend.mem_no
				 , mem_name
				 , major_name
				 , job_name
				 , to_char(start_time, 'HH:MM:SS') start_time
				 , to_char(end_time, 'HH:MM:SS') end_time
				 , attend.status
				 , to_char(regist_date, 'YYYY-MM-DD') regist_date
			from attend
			join member on (member.mem_no = attend.mem_no)
			join major on (major.major_no = member.major_no)
			join job on (job.job_no = member.job_no)
		 where member.status != 'Y'
			 and to_char(regist_date, 'YYYY-MM-DD') = #{startDate}
	</select>
	
	<select id="selectLecInsertDate" resultMap="insertDateResult">
		select
				   insert_no
				 , to_char(start_date, 'YYYY-MM-DD') start_date
				 , to_char(end_date, 'YYYY-MM-DD') end_date
				 , insert_type
			from insert_date
		 where insert_type = '1'
	</select>
	
	<select id="selectStuInsertDate" resultMap="insertDateResult">
		select
				   insert_no
				 , to_char(start_date, 'YYYY-MM-DD') start_date
				 , to_char(end_date, 'YYYY-MM-DD') end_date
				 , insert_type
			from insert_date
		 where insert_type = '2'
	</select>
	
	<update id="updateLecDate">
		update insert_date
		   set start_date = #{startDate}
		     , end_date = #{endDate}
		 where insert_type = #{insertType}
	</update>
	
	<update id="updateStuDate">
		update insert_date
		   set start_date = #{startDate}
		     , end_date = #{endDate}
		 where insert_type = #{insertType}
	</update>
	
	<insert id="insertManyMember" parameterType="java.util.HashMap">
    insert into member
    (mem_no, major_no, job_no, mem_name, mem_id, mem_pwd, phone, email, address, resident, salary, leave_count, birth, gender, hire_date)
    select seq_mem_no.nextval, a.*
    from(
    <foreach collection="m" item="item" separator="UNION ALL ">
        select #{item.majorNo} majorNo,
        #{item.jobNo} jobNo,
        #{item.memName} memName,
        #{item.memId} memId,
        #{item.memPwd} memPwd,
        #{item.phone} phone,
        #{item.email} email,
        #{item.address} address,
        #{item.resident} resident,
        #{item.salary} salary,
        #{item.leaveCount} leaveCount,
        #{item.birth} birth,
        #{item.gender} gender,
        #{item.hireDate} hireDate from dual
    </foreach>
        ) a
	</insert>
	
	<insert id="univCalendarInsertOne">
		insert
		  into calendar
		  (
		    cal_no
		  , ctg_no
		  , cal_title
		  , cal_content
		  , start_date
		  , end_date
		  , is_allday
		  , is_repeat
		  , is_alert
		  , cal_writer
		  )
		  values
		  (
		    seq_cal_no.nextval
		  , '7'
		  , #{calTitle}
		  , #{calContent}
		  , #{startDate}
		  , #{endDate}
		  , 'Y'
		  , 'N'
		  , 'N'
		  , '1'
		  )
	</insert>
	
	<update id="updateUnivCal">
		update
					 calendar
			 set cal_title = #{calTitle}
			   , cal_content = #{calContent}
			   , start_date = #{startDate}
			   , end_date = #{endDate}
			   , modify_date = sysdate
		 where cal_no = #{calNo} 
	</update>
	
	<update id="deleteUnivCal">
		update
					 calendar
			 set status = 'N'
		 where cal_no = #{calNo}
	</update>
	
	<insert id="univCalendarInsertMany" parameterType="java.util.HashMap">
		insert into calendar
		(cal_no, ctg_no, cal_title, cal_content, start_date, end_date, is_allday, cal_writer)
		select seq_cal_no.nextval, a.*
		from(
		<foreach collection="calList" item="item" separator="UNION ALL ">
			select #{item.ctgNo} ctgNo,
						 #{item.calTitle} calTitle,
						 #{item.calContent} calContent,
						 #{item.startDate} startDate,
						 #{item.endDate} endDate,
						 #{item.isAllday} isAllday,
						 #{item.calWriter} calWriter from dual
		</foreach>
				) a
	</insert>

	<select id="adminResourceListCount" resultType="_int">
		select
					 count(*)
			from resources
		 where status = 'Y'
	</select>
	
	<select id="adminResourceList" resultMap="resourceResult">
		select 
					 res_no
				 , res_type
				 , res_name
				 , use_status
				 , res_gps
				 , stock
			from resources
		 where status = 'Y'
		 order
        by res_no desc
	</select>
	
	<select id="resourceTypeCount" resultMap="resourceResult">
		select
					 res_no
				 , res_type
			from resources
		 where status = 'Y'
	</select>
	
	<select id="ajaxFilterResourceListCount" resultType="_int">
		select count(*)
		  from resources
		 where status = 'Y'
		 <if test="resName != ''">
		 	and res_name LIKE '%' || #{resName} || '%'
		 </if>
		 <if test="resType != 0">
		  and res_type = #{resType}
		 </if>
	</select>
	
	<select id="ajaxFilterResourceList" resultMap="resourceResult">
		select 
					 res_no
				 , res_type
				 , res_name
				 , use_status
				 , res_gps
				 , stock
			from resources
		 where status = 'Y'
		 <if test="r.resName != ''">
		 	and res_name LIKE '%' || #{r.resName} || '%'
		 </if>
		 <if test="r.resType != 0">
		 	and res_type = #{r.resType}
		 </if>
		 order
        by res_no desc
	</select>
	
	<update id="deleteResource">
		update
					 resources
			 set status = 'N'
			   , mod_date = sysdate
			   , del_content = #{delContent}
		<where>
			<foreach item="item" collection="resNo" open="res_no in (" separator="," close=")">
				#{item}
			</foreach>
		</where>
	</update>
	
	<update id="updateResource">
		update
				   resources
			 set res_type = #{r.resType}
			   , res_name = #{r.resName}
			   , res_gps = #{r.resGps}
			   , res_detail = #{r.resDetail}
			   , mod_date = sysdate
		 <if test="r.stock != ''">
		 		, stock = #{r.stock}
		 </if>
		 <if test="r.resType != 4">
		 	 , stock = null
		 </if>
		 <where>
		 	 <foreach item="item" collection="resNo" open="res_no in (" separator="," close=")">
					#{item}
			 </foreach>
		 </where>
	</update>

	<insert id="insertResource">
		insert
		  into resources
		  (
		  	res_no
		  , res_type
		  , res_name
		  , res_detail
		  , res_gps
		  <if test="stock != ''">
		  , stock
		  </if>
		  )
		  values
		  (
		  	seq_res_no.nextval
		  , #{resType}
		  , #{resName}
		  , #{resDetail}
		  , #{resGps}
		  <if test="stock != ''">
		  , #{stock}
		  </if>
		  )     
	</insert>
	
	<select id="resourceDetail" resultMap="resourceResult">
		select
					 res_no
				 , res_type
				 , res_name
				 , res_detail
				 , res_gps
				 , stock
			from resources
		 where res_no = #{resNo}
	</select>
	
	<select id="selectReservationList" resultMap="reservationResult">
		select
					rev_no
				, rev_reason
				, to_char(to_date(rev_date, 'YY-MM-DD'), 'YY-MM-DD') rev_date
				, to_char(to_date(start_time, 'HH24:MI'), 'HH24:MI') start_time
				, to_char(to_date(end_time, 'HH24:MI'), 'HH24:MI') end_time
				, reservation.status
				, member.mem_name
				, resources.res_name
				, resources.res_type
				, major_name
		 from reservation
		 left join member on (member.mem_no = reservation.mem_no)
		 left join resources on (resources.res_no = reservation.res_no)
		 left join major on (member.major_no = major.major_no)
		where reservation.status in (1, 2)
		  and reservation.res_no = #{resNo}
		  order
         by rev_date desc
	</select>
	
	<select id="resourceReservationListCount" resultType="_int">
		select
					 count(*)
			from reservation
		 where status != '3'
	</select>
	
	<select id="resourceReservationList" resultMap="reservationResult">
		select
					 rev_no
				 , rev_reason
				 , to_char(to_date(rev_date, 'YY-MM-DD'), 'YY-MM-DD') rev_date
				 , to_char(to_date(start_time, 'HH24:MI'), 'HH24:MI') start_time
				 , to_char(to_date(end_time, 'HH24:MI'), 'HH24:MI') end_time
				 , reservation.status
				 , member.mem_name
				 , resources.res_name
				 , resources.res_type
				 , major_name
		  from reservation
		  left join member on (reservation.mem_no = member.mem_no)
		  left join resources on (resources.res_no = reservation.res_no)
		  left join major on (member.major_no = major.major_no)
		 where reservation.status in (1, 2)
		 order
		    by rev_no desc
	</select>
	
	<select id="ajaxFilterResourceReservationListCount" resultType="_int">
		select
					 count(*)
			from reservation
			left join resources on (reservation.res_no = resources.res_no)
		 where reservation.status != '3'
	 	<choose>
		 	<when test="resType == 5">
		 		and resources.res_type = '4' and reservation.status = '1'
		 	</when>
		 	<otherwise>
		 		<if test="resType != 0">
		 			and resources.res_type = #{resType}
		 		</if>
		 	</otherwise>
	 	</choose>
		<if test="resName != ''">
		 	and res_name LIKE '%' || #{resName} || '%'
		</if>
	</select>
	
	<select id="ajaxFilterResourceReservationList" resultMap="reservationResult">
		select
					 rev_no
				 , rev_reason
				 , to_char(to_date(rev_date, 'YY-MM-DD'), 'YY-MM-DD') rev_date
				 , to_char(to_date(start_time, 'HH24:MI'), 'HH24:MI') start_time
				 , to_char(to_date(end_time, 'HH24:MI'), 'HH24:MI') end_time
				 , reservation.status
				 , member.mem_name
				 , resources.res_name
				 , resources.res_type
				 , major_name
		  from reservation
		  left join member on (reservation.mem_no = member.mem_no)
		  left join resources on (resources.res_no = reservation.res_no)
		  left join major on (member.major_no = major.major_no)
		 where reservation.status in (1, 2)
	 	<choose>
		 	<when test="r.resType == 5">
		 		and resources.res_type = '4' and reservation.status = '1'
		 	</when>
		 	<otherwise>
		 		<if test="r.resType != 0">
		 			and resources.res_type = #{r.resType}
		 		</if>
		 	</otherwise>
	 	</choose>
		<if test="r.resName != ''">
		 	and res_name LIKE '%' || #{r.resName} || '%'
		</if>
		 order
		    by rev_no desc
	</select>

</mapper>
