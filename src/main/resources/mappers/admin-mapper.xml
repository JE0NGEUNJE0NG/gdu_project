<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper 
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="adminMapper">
  
  <resultMap type="CollegeDto" id="collegeResult">
  	<id column="col_no" property="colNo" />
  	<result column="col_name" property="colName" />
  </resultMap>
  
  <resultMap type="MajorDto" id="majorResult">
  	<id column="major_no" property="majorNo" />
  	<result column="col_no" property="colNo" />
  	<result column="major_name" property="majorName" />
  	<result column="status" property="status" />
  </resultMap>
  
  <resultMap type="MemberDto" id="memberResult">
  	<id column="mem_No" property="memNo" />
  	<result column="major_name" property="majorNo" />
  	<result column="job_name" property="jobNo" />
  	<result column="mem_Name" property="memName" />
  	<result column="mem_id" property="memId" />
  	<result column="mem_pwd" property="memPwd" />
  	<result column="phone" property="phone" />
  	<result column="email" property="email" />
  	<result column="address" property="address" />
  	<result column="resident" property="resident" />
  	<result column="hire_date" property="hireDate" />
  	<result column="end_date" property="endDate" />
  	<result column="status" property="status" />
  	<result column="salary" property="salary" />
  	<result column="sign_url" property="signUrl" />
  	<result column="profile_Url" property="profileUrl" />
  	<result column="leave_Count" property="leaveCount" />
  	<result column="birth" property="birth" />
  	<result column="gender" property="gender" />
  </resultMap>
  
  <resultMap type="JobDto" id="jobResult">
  	<id column="job_No" property="jobNo" />
  	<result column="job_Name" property="jobName" />
  	<result column="job_Type" property="jobType" />
  	<result column="status" property="status" />
  	<result column="job_Level" property="jobLevel" />
  </resultMap>
  
  <resultMap type="VacationDto" id="vacationResult">
  	<id column="vac_no" property="vacNo" />
  	<result column="mem_no" property="memNo" />
  	<result column="vac_used" property="vacUsed" />
  	<result column="vac_option" property="vacOption" />
  	<result column="regist_date" property="registDate" />
  	<result column="vac_reason" property="vacReason" />
  	<result column="doc_no" property="docNo" />
  	<result column="status" property="status" />
  	<result column="start_date" property="startDate" />
  	<result column="end_date" property="endDate" />
  	<result column="vac_type_no" property="vacTypeNo" />
  	<result column="vac_type" property="vacType" />
  </resultMap>

  <select id="selectCollegeList" resultMap="collegeResult">
  	select
  				 col_no
  			 , col_name
  		from college
  </select>
  
  <select id="selectMajorList" resultMap="majorResult">
  	select
		       major_no
		     , col_no
		     , major_name
		     , status
		  from major
		 where status = 'Y'
  </select>
  
  <select id="selectMemberListCount" resultType="_int">
  	select
  				 count(*)
  		from member
  	 where status = 'N'
  </select>
  
  <select id="selectMemberList" resultMap="memberResult">
		select
		       mem_no
		     , mem_name
		     , major_name
		     , job_name
		     , resident
		     , email
		     , address
		     , to_char(hire_date, 'YYYY-MM-DD') hire_date
		     , phone
		     , gender
		     , to_char(birth, 'YYMMDD') birth
		  from member
		  join major on (member.major_no = major.major_no)
		  join job on (member.job_no = job.job_no)
		 where member.status = 'N'
		 order
		    by mem_no desc
  </select>
  
  <select id="selectJobList" resultMap="jobResult">
		select
		       job_no
		     , job_name
		     , job_type
		     , status
		     , job_level
		  from job
		 where status = 'Y'
  </select>
  
  <update id="updateOutMember">
		update
		       member
		   set status = 'Y'
		     , end_date = sysdate
		 <where>
		 	<foreach item="item" collection="array"
		 			open="mem_no in (" separator="," close=")">
		 		#{item}
		 	</foreach>
		 </where>
  </update>
  
	<update id="updateMajorMember">
  	update
  				 member
  		 set major_no = #{majorNo}
  	<where>
  		<foreach item="item" collection="memNo"
  				open="mem_no in (" separator="," close=")">
  			#{item}
  		</foreach>
  	</where>
  </update>
  
  <update id="updateJobMember">
  	update
  				 member
  		 set job_no = #{jobNo}
  	<where>
  		<foreach item="item" collection="memNo"
  				open="mem_no in (" separator="," close=")">
				#{item}  		
  		</foreach>
  	</where>
  </update>
  
  <!-- 필터링 ajax 통신 직원조회 (페이징) -->
  <select id="ajaxFilterMemberListCount" resultType="_int">
  	select
  				 count(*)
  		from member
    <where>
    	<if test="status != 'all'">
				and status = #{status}
    	</if>
    	<if test="majorNo != 0">
    		and major_no = #{majorNo}
    	</if>
    	<if test="jobNo != 0">
    		and job_no = #{jobNo}
    	</if>
    </where>
  </select>
  
  <!-- 필터링 ajax통신 직원조회 -->
  <select id="ajaxFilterMemberList" resultMap="memberResult">
  	select
		       mem_no
		     , mem_name
		     , major_name
		     , job_name
		     , resident
		     , email
		     , address
		     , to_char(hire_date, 'YYYY-MM-DD') hire_date
		     , phone
		     , to_char(birth, 'YYMMDD') birth
		     , gender
		  from member
		  join major on (member.major_no = major.major_no)
		  join job on (member.job_no = job.job_no)
     <where>
	     <if test="m.status != 'all'">
			 	 and member.status = #{m.status}
			 </if>
			 <if test="m.majorNo != 0">
			 	 and member.major_no = #{m.majorNo}
			 </if>
			 <if test="m.jobNo != 0">
			   and member.job_no = #{m.jobNo}
			 </if>
		 </where>
		 order
		    by mem_no desc
  </select>
  
  <!-- 이름검색 필터링 ajax 통신 직원조회 (페이징) -->
  <select id="ajaxNameFilterMemberListCount" resultType="_int">
  	select
  				 count(*)
  		from member
    <where>
    	<if test="status != 'all'">
				and status = #{status}
    	</if>
    	<if test="majorNo != 0">
    		and major_no = #{majorNo}
    	</if>
    	<if test="jobNo != 0">
    		and job_no = #{jobNo}
    	</if>
    	  and member.mem_name LIKE '%' || #{memName} || '%'
    </where>
  </select>
  
  <!-- 이름검색 필터링 ajax통신 직원조회(학과직급포함) -->
  <select id="ajaxNameFilterMemberList" resultMap="memberResult">
  	select
		       mem_no
		     , mem_name
		     , major_name
		     , job_name
		     , resident
		     , email
		     , address
		     , to_char(hire_date, 'YYYY-MM-DD') hire_date
		     , phone
		     , to_char(birth, 'YYMMDD') birth
		     , gender
		  from member
		  join major on (member.major_no = major.major_no)
		  join job on (member.job_no = job.job_no)
     <where>
	     <if test="m.status != 'all'">
			 	 and member.status = #{m.status}
			 </if>
			 <if test="m.majorNo != 0">
			 	 and member.major_no = #{m.majorNo}
			 </if>
			 <if test="m.jobNo != 0">
			   and member.job_no = #{m.jobNo}
			 </if>
			   and member.mem_name LIKE '%' || #{m.memName} || '%'
		 </where>
		 order
		    by mem_no desc
  </select>

  <insert id="insertOneMember">
		insert
		  into member
		  (
		    mem_no
		  , major_no
		  , job_no
		  , mem_name
		  , mem_id
		  , mem_pwd
		  , phone
		  , email
		  , address
		  , resident
		  , salary
		  , leave_count
		  , birth
		  , gender
		  )
		  values
		  (
		    seq_mem_no.nextval
		  , #{majorNo}
		  , #{jobNo}
		  , #{memName}
		  , #{memId}
		  , #{memPwd}
		  , #{phone}
		  , #{email}
		  , #{address}
		  , #{resident}
		  , #{salary}
		  , #{leaveCount}
		  , #{birth}
		  , #{gender}
		  )
  </insert>
  
  <select id="selectMemberDetail" resultMap="memberResult">
  	select
		       mem_no
		     , mem_name
		     , mem_id
		     , phone
		     , email
		     , address
		     , major_name
		     , job_name
		     , to_char(birth, 'YYYY-MM-DD') birth
		     , to_char(hire_date, 'YYYY-MM-DD') hire_date
		     , to_char(end_date, 'YYYY-MM-DD') end_date
		     , sign_url
		     , profile_url
		     , member.status
		  from member
		  join major on (member.major_no = major.major_no)
		  join job on (member.job_no = job.job_no)
		 where mem_no = #{memNo}
  </select>
  
  <update id="updateMember">
  	update
  				 member
  		 set mem_name = #{memName}
  		   , phone = #{phone}
  		   , major_no = #{majorNo}
  		   , job_no = #{jobNo}
  		   , address = #{address}
  	 where mem_no = #{memNo} 
  </update>
  
  <select id="selectDashboardMemberList" resultMap="memberResult">
  	select
  				 mem_no
  			 , mem_name
  			 , major_name
  			 , job_name
  		from member
  	  join major on (member.major_no = major.major_no)
		  join job on (member.job_no = job.job_no)
  	 where member.status = 'N'
  </select>
  
  <select id="selectDashboardVacation" resultMap="vacationResult">
    select 
    		   vac.*
	    from (
	      select
			         member.mem_no,
			         major_name,
			         mem_name,
			         start_date,
			         vacation.end_date,
			         vacation.status,
			         vac_reason,
			         vac_type
		      from member
		      join vacation ON (member.mem_no = vacation.mem_no)
		      join major on (member.major_no = major.major_no)
		     where member.status = 'N'
		     order by vac_no desc
	   ) vac
	   where rownum between 1 and 7
  </select>

  
</mapper>
